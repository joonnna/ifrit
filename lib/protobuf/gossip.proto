syntax = "proto3";

service gossip {
    rpc Spread (GossipMsg) returns (GossipResponse) {}
}

message GossipMsg {
    //repeated NodeInfo existingNodes
    map<string, uint64> existingHosts = 1;
    Note ownNote = 2;
    bool rebuttal = 3;
}
/*
message HostState {
    uint64 epoch = 1;
    bool accused = 2;
}
*/

//Only populated if not a valid neighbor
message GossipResponse {
    repeated Certificate certificates = 1;
    repeated Note notes = 2;
    repeated Accusation accusations = 3;
}

//Raw certificate
message Certificate {
    bytes raw = 1;
}

//accuser and accused are the respective node ids
message Accusation {
    uint64 epoch = 1;
    bytes accuser = 2;
    bytes accused = 3;
    Signature signature = 4;
    bytes mask = 5;
    uint32 ringNum = 6;
}

message Note {
    uint64 epoch = 1;
    bytes id = 2;
    bytes mask = 3;
    Signature signature = 4;
}

//Raw elliptic signature
message Signature {
    bytes r = 1;
    bytes s = 2;
}

message Data {
    bytes content = 1;
    bytes id = 2;
}

message Ping {
    bytes nonce = 1;
}

message Pong {
    bytes nonce = 1;
    Signature signature = 2;
}
