syntax = "proto3";

package gossip;

service gossip {
    rpc Spread (State) returns (StateResponse) {}
    rpc Messenger (Msg) returns (MsgResponse) {}
    rpc Stream (stream Msg) returns (MsgResponse) {}
}

message State {
    //repeated NodeInfo existingNodes
    map<string, uint64> existingHosts = 1;
    Note ownNote = 2;
    bytes externalGossip = 3;
}
/*
message HostState {
    uint64 epoch = 1;
    bool accused = 2;
}
*/

//Application message
message Msg {
    bytes content = 1;
} 


//Application response
message MsgResponse {
    bytes content = 1;
}


message StateResponse {
    repeated Certificate certificates = 1;
    repeated Note notes = 2;
    repeated Accusation accusations = 3;
    bytes externalGossip = 4;
}

//Raw certificate
message Certificate {
    bytes raw = 1;
}

//accuser and accused are the respective node ids
message Accusation {
    uint64 epoch = 1;
    bytes accuser = 2;
    bytes accused = 3;
    Signature signature = 4;
    uint32 ringNum = 5;
}

message Note {
    uint64 epoch = 1;
    bytes id = 2;
    uint32 mask = 3;
    Signature signature = 4;
}

//Raw elliptic signature
message Signature {
    bytes r = 1;
    bytes s = 2;
}

message Data {
    bytes content = 1;
    bytes id = 2;
}

message Ping {
    bytes nonce = 1;
}

message Pong {
    bytes nonce = 1;
    Signature signature = 2;
}

message Test {
    repeated int32 nums = 1;
}
