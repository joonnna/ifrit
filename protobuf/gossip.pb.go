// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gossip.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	gossip.proto

It has these top-level messages:
	State
	Msg
	MsgResponse
	StateResponse
	Certificate
	Accusation
	Note
	Signature
	Data
	Ping
	Pong
	Test
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type State struct {
	// repeated NodeInfo existingNodes
	ExistingHosts  map[string]uint64 `protobuf:"bytes,1,rep,name=existingHosts" json:"existingHosts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	OwnNote        *Note             `protobuf:"bytes,2,opt,name=ownNote" json:"ownNote,omitempty"`
	ExternalGossip []byte            `protobuf:"bytes,3,opt,name=externalGossip,proto3" json:"externalGossip,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto1.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *State) GetExistingHosts() map[string]uint64 {
	if m != nil {
		return m.ExistingHosts
	}
	return nil
}

func (m *State) GetOwnNote() *Note {
	if m != nil {
		return m.OwnNote
	}
	return nil
}

func (m *State) GetExternalGossip() []byte {
	if m != nil {
		return m.ExternalGossip
	}
	return nil
}

// Application message
type Msg struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto1.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Msg) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// Application response
type MsgResponse struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *MsgResponse) Reset()                    { *m = MsgResponse{} }
func (m *MsgResponse) String() string            { return proto1.CompactTextString(m) }
func (*MsgResponse) ProtoMessage()               {}
func (*MsgResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MsgResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type StateResponse struct {
	Certificates   []*Certificate `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
	Notes          []*Note        `protobuf:"bytes,2,rep,name=notes" json:"notes,omitempty"`
	Accusations    []*Accusation  `protobuf:"bytes,3,rep,name=accusations" json:"accusations,omitempty"`
	ExternalGossip []byte         `protobuf:"bytes,4,opt,name=externalGossip,proto3" json:"externalGossip,omitempty"`
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto1.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StateResponse) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *StateResponse) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *StateResponse) GetAccusations() []*Accusation {
	if m != nil {
		return m.Accusations
	}
	return nil
}

func (m *StateResponse) GetExternalGossip() []byte {
	if m != nil {
		return m.ExternalGossip
	}
	return nil
}

// Raw certificate
type Certificate struct {
	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto1.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Certificate) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

// accuser and accused are the respective node ids
type Accusation struct {
	Epoch     uint64     `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Accuser   []byte     `protobuf:"bytes,2,opt,name=accuser,proto3" json:"accuser,omitempty"`
	Accused   []byte     `protobuf:"bytes,3,opt,name=accused,proto3" json:"accused,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	RingNum   uint32     `protobuf:"varint,5,opt,name=ringNum" json:"ringNum,omitempty"`
}

func (m *Accusation) Reset()                    { *m = Accusation{} }
func (m *Accusation) String() string            { return proto1.CompactTextString(m) }
func (*Accusation) ProtoMessage()               {}
func (*Accusation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Accusation) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Accusation) GetAccuser() []byte {
	if m != nil {
		return m.Accuser
	}
	return nil
}

func (m *Accusation) GetAccused() []byte {
	if m != nil {
		return m.Accused
	}
	return nil
}

func (m *Accusation) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Accusation) GetRingNum() uint32 {
	if m != nil {
		return m.RingNum
	}
	return 0
}

type Note struct {
	Epoch     uint64     `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Id        []byte     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Mask      uint32     `protobuf:"varint,3,opt,name=mask" json:"mask,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto1.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Note) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Note) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Note) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *Note) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Raw elliptic signature
type Signature struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto1.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Signature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Signature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type Data struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Id      []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto1.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Data) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Data) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type Ping struct {
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto1.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Ping) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type Pong struct {
	Nonce     []byte     `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature *Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto1.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Pong) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Pong) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Test struct {
	Nums []int32 `protobuf:"varint,1,rep,packed,name=nums" json:"nums,omitempty"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto1.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Test) GetNums() []int32 {
	if m != nil {
		return m.Nums
	}
	return nil
}

func init() {
	proto1.RegisterType((*State)(nil), "proto.State")
	proto1.RegisterType((*Msg)(nil), "proto.Msg")
	proto1.RegisterType((*MsgResponse)(nil), "proto.MsgResponse")
	proto1.RegisterType((*StateResponse)(nil), "proto.StateResponse")
	proto1.RegisterType((*Certificate)(nil), "proto.Certificate")
	proto1.RegisterType((*Accusation)(nil), "proto.Accusation")
	proto1.RegisterType((*Note)(nil), "proto.Note")
	proto1.RegisterType((*Signature)(nil), "proto.Signature")
	proto1.RegisterType((*Data)(nil), "proto.Data")
	proto1.RegisterType((*Ping)(nil), "proto.Ping")
	proto1.RegisterType((*Pong)(nil), "proto.Pong")
	proto1.RegisterType((*Test)(nil), "proto.Test")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gossip service

type GossipClient interface {
	Spread(ctx context.Context, in *State, opts ...grpc.CallOption) (*StateResponse, error)
	Messenger(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*MsgResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamClient, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Spread(ctx context.Context, in *State, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := grpc.Invoke(ctx, "/proto.gossip/Spread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Messenger(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := grpc.Invoke(ctx, "/proto.gossip/Messenger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gossip_serviceDesc.Streams[0], c.cc, "/proto.gossip/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipStreamClient{stream}
	return x, nil
}

type Gossip_StreamClient interface {
	Send(*Msg) error
	Recv() (*MsgResponse, error)
	grpc.ClientStream
}

type gossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipStreamClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipStreamClient) Recv() (*MsgResponse, error) {
	m := new(MsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Gossip service

type GossipServer interface {
	Spread(context.Context, *State) (*StateResponse, error)
	Messenger(context.Context, *Msg) (*MsgResponse, error)
	Stream(Gossip_StreamServer) error
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_Spread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Spread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gossip/Spread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Spread(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Messenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Messenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gossip/Messenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Messenger(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).Stream(&gossipStreamServer{stream})
}

type Gossip_StreamServer interface {
	Send(*MsgResponse) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type gossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipStreamServer) Send(m *MsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipStreamServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spread",
			Handler:    _Gossip_Spread_Handler,
		},
		{
			MethodName: "Messenger",
			Handler:    _Gossip_Messenger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Gossip_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gossip.proto",
}

func init() { proto1.RegisterFile("gossip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0xc5, 0x69, 0xb2, 0xa9, 0x37, 0xe9, 0x34, 0xac, 0x3d, 0x44, 0x15, 0x52, 0x4b, 0x24, 0x58,
	0x5e, 0xa8, 0xa6, 0x4e, 0x42, 0x88, 0x27, 0x10, 0x54, 0xf0, 0x40, 0xa7, 0xc9, 0xe3, 0x07, 0x4c,
	0x7a, 0x09, 0xd6, 0x56, 0x3b, 0xb2, 0x5d, 0xb6, 0x7d, 0x09, 0xaf, 0xfc, 0x0d, 0x9f, 0xc1, 0xaf,
	0x20, 0x3b, 0x49, 0x9b, 0x8e, 0x8e, 0x89, 0xa7, 0xde, 0xe3, 0x7b, 0xae, 0xef, 0xb9, 0xa7, 0x37,
	0x86, 0xa4, 0x54, 0xc6, 0x88, 0x6a, 0x52, 0x69, 0x65, 0x15, 0x8d, 0xfc, 0x4f, 0xf6, 0x9b, 0x40,
	0x74, 0x61, 0xb9, 0x45, 0x3a, 0x83, 0x01, 0xde, 0x08, 0x63, 0x85, 0x2c, 0x3f, 0x2a, 0x63, 0x4d,
	0x4a, 0xc6, 0xbd, 0x3c, 0x9e, 0x8e, 0x6a, 0xfe, 0xc4, 0x93, 0x26, 0xb3, 0x2e, 0x63, 0x26, 0xad,
	0xbe, 0x65, 0xdb, 0x55, 0xf4, 0x19, 0xec, 0xab, 0x6b, 0x79, 0xa6, 0x2c, 0xa6, 0xc1, 0x98, 0xe4,
	0xf1, 0x34, 0x6e, 0x2e, 0x70, 0x47, 0xac, 0xcd, 0xd1, 0xe7, 0x70, 0x80, 0x37, 0x16, 0xb5, 0xe4,
	0x57, 0x1f, 0xbc, 0xac, 0xb4, 0x37, 0x26, 0x79, 0xc2, 0xee, 0x9c, 0x0e, 0xdf, 0x00, 0xfd, 0xbb,
	0x27, 0x3d, 0x84, 0xde, 0x25, 0xde, 0xa6, 0x64, 0x4c, 0xf2, 0x3e, 0x73, 0x21, 0x3d, 0x82, 0xe8,
	0x3b, 0xbf, 0x5a, 0xd5, 0x4d, 0x43, 0x56, 0x83, 0xd7, 0xc1, 0x2b, 0x92, 0x8d, 0xa0, 0x37, 0x37,
	0x25, 0x4d, 0x61, 0xbf, 0x50, 0xd2, 0xa2, 0xb4, 0xbe, 0x2c, 0x61, 0x2d, 0xcc, 0x8e, 0x21, 0x9e,
	0x9b, 0x92, 0xa1, 0xa9, 0x94, 0x34, 0xf8, 0x0f, 0xe2, 0x2f, 0x02, 0x03, 0x6f, 0xc3, 0x9a, 0xfb,
	0x12, 0x92, 0x02, 0xb5, 0x15, 0x5f, 0x45, 0xc1, 0x2d, 0xb6, 0x96, 0xd1, 0x66, 0xe2, 0x77, 0x9b,
	0x14, 0xdb, 0xe2, 0xd1, 0xa7, 0x10, 0x49, 0xe5, 0x0a, 0x02, 0x5f, 0xb0, 0x65, 0x51, 0x9d, 0xa1,
	0xa7, 0x10, 0xf3, 0xa2, 0x58, 0x19, 0x6e, 0x85, 0x92, 0x26, 0xed, 0x79, 0xe2, 0xe3, 0x86, 0xf8,
	0x76, 0x9d, 0x61, 0x5d, 0xd6, 0x0e, 0x57, 0xc3, 0x5d, 0xae, 0x66, 0x23, 0x88, 0x3b, 0xe2, 0x9c,
	0x9d, 0x9a, 0x5f, 0x37, 0xe3, 0xba, 0x30, 0xfb, 0x49, 0x00, 0x36, 0x4d, 0x9c, 0xbb, 0x58, 0xa9,
	0xe2, 0x9b, 0xa7, 0x84, 0xac, 0x06, 0xce, 0x29, 0xdf, 0x1c, 0xb5, 0x77, 0x3d, 0x61, 0x2d, 0xdc,
	0x64, 0x16, 0xcd, 0xdf, 0xda, 0x42, 0x3a, 0x81, 0xbe, 0x11, 0xa5, 0xe4, 0x76, 0xa5, 0xd1, 0x8b,
	0x8b, 0xa7, 0x87, 0xed, 0x86, 0xb5, 0xe7, 0x6c, 0x43, 0x71, 0x37, 0x69, 0x21, 0xcb, 0xb3, 0xd5,
	0x32, 0x8d, 0xc6, 0x24, 0x1f, 0xb0, 0x16, 0x66, 0x15, 0x84, 0x7e, 0x93, 0x76, 0x6b, 0x3b, 0x80,
	0x40, 0x2c, 0x1a, 0x59, 0x81, 0x58, 0x50, 0x0a, 0xe1, 0x92, 0x9b, 0x4b, 0x2f, 0x67, 0xc0, 0x7c,
	0xfc, 0xbf, 0x5a, 0xb2, 0x63, 0xe8, 0xaf, 0xcf, 0x69, 0x02, 0x44, 0x37, 0x8e, 0x11, 0xed, 0x90,
	0x69, 0xba, 0x11, 0x93, 0x9d, 0x40, 0xf8, 0x9e, 0x5b, 0x7e, 0xff, 0x2a, 0xdd, 0x95, 0x97, 0x3d,
	0x81, 0xf0, 0x5c, 0xc8, 0xd2, 0x0d, 0x23, 0x95, 0x2c, 0xb0, 0xe1, 0xd7, 0x20, 0xfb, 0x04, 0xe1,
	0xb9, 0xba, 0x2f, 0xbb, 0x3d, 0x46, 0xf0, 0xf0, 0x18, 0x43, 0x08, 0x3f, 0xa3, 0xb1, 0xce, 0x12,
	0xb9, 0x5a, 0xd6, 0x4b, 0x1b, 0x31, 0x1f, 0x4f, 0x7f, 0x10, 0xd8, 0xab, 0x9f, 0x09, 0x3a, 0x81,
	0xbd, 0x8b, 0x4a, 0x23, 0x5f, 0xd0, 0xa4, 0xfb, 0x04, 0x0c, 0x8f, 0xba, 0xa8, 0xfd, 0x12, 0xb2,
	0x47, 0xf4, 0x05, 0xf4, 0xe7, 0x68, 0x0c, 0xca, 0x12, 0x35, 0x85, 0x86, 0x34, 0x37, 0xe5, 0x90,
	0x6e, 0xe2, 0x0e, 0xdd, 0x5d, 0x6f, 0x35, 0xf2, 0xe5, 0xc3, 0xdc, 0x9c, 0x9c, 0x90, 0x2f, 0x7b,
	0x3e, 0x71, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x51, 0xad, 0xc8, 0xc6, 0x04, 0x00, 0x00,
}
