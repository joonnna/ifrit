// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gossip.proto

/*
Package gossip is a generated protocol buffer package.

It is generated from these files:
	gossip.proto

It has these top-level messages:
	Empty
	NodeInfo
	GossipMsg
	Certificate
	Partners
	Accusation
	Note
	Signature
	Ping
	Pong
*/
package gossip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodeInfo struct {
	LocalAddr string `protobuf:"bytes,1,opt,name=localAddr" json:"localAddr,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeInfo) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

type GossipMsg struct {
	// google.protobuf.Struct notes = 1;
	// google.protobuf.Struct accusations = 2;
	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
	Notes        []*Note        `protobuf:"bytes,2,rep,name=notes" json:"notes,omitempty"`
	Accusations  []*Accusation  `protobuf:"bytes,3,rep,name=accusations" json:"accusations,omitempty"`
}

func (m *GossipMsg) Reset()                    { *m = GossipMsg{} }
func (m *GossipMsg) String() string            { return proto.CompactTextString(m) }
func (*GossipMsg) ProtoMessage()               {}
func (*GossipMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GossipMsg) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *GossipMsg) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *GossipMsg) GetAccusations() []*Accusation {
	if m != nil {
		return m.Accusations
	}
	return nil
}

type Certificate struct {
	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Certificate) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type Partners struct {
	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
}

func (m *Partners) Reset()                    { *m = Partners{} }
func (m *Partners) String() string            { return proto.CompactTextString(m) }
func (*Partners) ProtoMessage()               {}
func (*Partners) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Partners) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type Accusation struct {
	Epoch     uint64     `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Accuser   []byte     `protobuf:"bytes,2,opt,name=accuser,proto3" json:"accuser,omitempty"`
	Accused   []byte     `protobuf:"bytes,3,opt,name=accused,proto3" json:"accused,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
}

func (m *Accusation) Reset()                    { *m = Accusation{} }
func (m *Accusation) String() string            { return proto.CompactTextString(m) }
func (*Accusation) ProtoMessage()               {}
func (*Accusation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Accusation) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Accusation) GetAccuser() []byte {
	if m != nil {
		return m.Accuser
	}
	return nil
}

func (m *Accusation) GetAccused() []byte {
	if m != nil {
		return m.Accused
	}
	return nil
}

func (m *Accusation) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Note struct {
	Epoch     uint64     `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Id        []byte     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Mask      string     `protobuf:"bytes,3,opt,name=mask" json:"mask,omitempty"`
	Signature *Signature `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Note) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Note) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Note) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

func (m *Note) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Signature struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Signature) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Signature) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type Ping struct {
	Nonce     []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Ping) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Ping) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Pong struct {
	Nonce     []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Pong) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Pong) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*NodeInfo)(nil), "NodeInfo")
	proto.RegisterType((*GossipMsg)(nil), "GossipMsg")
	proto.RegisterType((*Certificate)(nil), "Certificate")
	proto.RegisterType((*Partners)(nil), "Partners")
	proto.RegisterType((*Accusation)(nil), "Accusation")
	proto.RegisterType((*Note)(nil), "Note")
	proto.RegisterType((*Signature)(nil), "Signature")
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*Pong)(nil), "Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gossip service

type GossipClient interface {
	Monitor(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	Spread(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Partners, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Monitor(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/gossip/Monitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Spread(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Partners, error) {
	out := new(Partners)
	err := grpc.Invoke(ctx, "/gossip/Spread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gossip service

type GossipServer interface {
	Monitor(context.Context, *Ping) (*Pong, error)
	Spread(context.Context, *GossipMsg) (*Partners, error)
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Monitor(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Spread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Spread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip/Spread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Spread(ctx, req.(*GossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Monitor",
			Handler:    _Gossip_Monitor_Handler,
		},
		{
			MethodName: "Spread",
			Handler:    _Gossip_Spread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gossip.proto",
}

func init() { proto.RegisterFile("gossip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xcf, 0xf9, 0xd3, 0x5e, 0xde, 0x44, 0x08, 0x59, 0x0c, 0xe1, 0x40, 0xa2, 0x78, 0x21,
	0x0b, 0x16, 0x2a, 0x1b, 0x62, 0x39, 0x21, 0x40, 0x0c, 0x77, 0xaa, 0xdc, 0x4f, 0x60, 0x62, 0x37,
	0x18, 0x5a, 0x3b, 0xb2, 0x5d, 0x21, 0x36, 0x56, 0xbe, 0x35, 0xb2, 0x93, 0x36, 0x61, 0x60, 0xe8,
	0x6d, 0x7e, 0x9f, 0xf7, 0xb1, 0x7f, 0x8f, 0xac, 0x07, 0xaa, 0xce, 0x38, 0xa7, 0x7a, 0xda, 0x5b,
	0xe3, 0x0d, 0x59, 0x42, 0xfe, 0xf1, 0xd0, 0xfb, 0x5f, 0xa4, 0x81, 0xeb, 0x7b, 0x23, 0xe4, 0x17,
	0xbd, 0x33, 0xf8, 0x39, 0x14, 0x7b, 0xd3, 0xf2, 0xfd, 0xad, 0x10, 0xb6, 0x46, 0x2b, 0xd4, 0x14,
	0x6c, 0x12, 0xc8, 0x1f, 0x04, 0xc5, 0xe7, 0xf8, 0xc6, 0x9d, 0xeb, 0xf0, 0x1b, 0xa8, 0x5a, 0x69,
	0xbd, 0xda, 0xa9, 0x96, 0x7b, 0xe9, 0x6a, 0xb4, 0x4a, 0x9b, 0x72, 0x5d, 0xd1, 0x0f, 0x93, 0xc8,
	0xfe, 0x71, 0xe0, 0x67, 0x90, 0x6b, 0x13, 0xac, 0x49, 0xb4, 0xe6, 0xf4, 0xde, 0x78, 0xc9, 0x06,
	0x0d, 0xbf, 0x86, 0x92, 0xb7, 0xed, 0xd1, 0x71, 0xaf, 0x8c, 0x76, 0x75, 0x1a, 0x2d, 0x25, 0xbd,
	0x3d, 0x6b, 0x6c, 0xbe, 0x27, 0x2f, 0xa0, 0x9c, 0x81, 0xf0, 0x63, 0x48, 0x2d, 0xff, 0x19, 0x23,
	0x57, 0x2c, 0x1c, 0xc9, 0x7b, 0xb8, 0xde, 0x70, 0xeb, 0xb5, 0xb4, 0xee, 0xf2, 0xa8, 0xe4, 0x37,
	0x02, 0x98, 0xd0, 0xf8, 0x09, 0xe4, 0xb2, 0x37, 0xed, 0xb7, 0x08, 0xc8, 0xd8, 0x30, 0xe0, 0x1a,
	0x96, 0x31, 0x92, 0xb4, 0x75, 0x12, 0xc1, 0xa7, 0x71, 0xda, 0x88, 0x3a, 0x9d, 0x6f, 0x04, 0x6e,
	0xa0, 0x70, 0xaa, 0xd3, 0xdc, 0x1f, 0xad, 0xac, 0xb3, 0x15, 0x6a, 0xca, 0x35, 0xd0, 0xed, 0x49,
	0x61, 0xd3, 0x92, 0x7c, 0x87, 0x2c, 0xfc, 0xcf, 0x7f, 0xd8, 0x8f, 0x20, 0x51, 0x62, 0xc4, 0x26,
	0x4a, 0x60, 0x0c, 0xd9, 0x81, 0xbb, 0x1f, 0x11, 0x57, 0xb0, 0x78, 0xbe, 0x80, 0xf5, 0x0a, 0x8a,
	0xb3, 0x8e, 0x2b, 0x40, 0x76, 0xfc, 0x49, 0x64, 0xc3, 0xe4, 0x46, 0x0e, 0x72, 0xe4, 0x1d, 0x64,
	0x1b, 0xa5, 0xbb, 0x10, 0x4a, 0x1b, 0xdd, 0xca, 0xd1, 0x37, 0x0c, 0xa1, 0x3e, 0x13, 0x70, 0xb8,
	0x33, 0x83, 0x84, 0xbb, 0xe6, 0x61, 0x77, 0xd7, 0x9f, 0x60, 0x31, 0xb4, 0x17, 0x3f, 0x85, 0xe5,
	0x9d, 0xd1, 0xca, 0x1b, 0x8b, 0x73, 0x1a, 0xb2, 0xdc, 0xe4, 0x34, 0x3c, 0x4b, 0xae, 0xf0, 0x4b,
	0x58, 0x6c, 0x7b, 0x2b, 0xb9, 0xc0, 0x40, 0xcf, 0x3d, 0xbd, 0x29, 0xe8, 0xa9, 0x07, 0xe4, 0xea,
	0xeb, 0x22, 0x96, 0xff, 0xed, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xea, 0x7c, 0xf3, 0x0c,
	0x03, 0x00, 0x00,
}
