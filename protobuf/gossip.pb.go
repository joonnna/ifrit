// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gossip.proto

/*
Package gossip is a generated protocol buffer package.

It is generated from these files:
	gossip.proto

It has these top-level messages:
	Empty
	NodeInfo
	GossipMsg
	Certificate
	Accusation
	Note
	Ping
	Pong
	Nodes
	Rebuttal
*/
package gossip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodeInfo struct {
	LocalAddr string `protobuf:"bytes,1,opt,name=localAddr" json:"localAddr,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeInfo) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

type GossipMsg struct {
	Notes       map[string]*Note        `protobuf:"bytes,1,rep,name=notes" json:"notes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Accusations map[string]*Accusation  `protobuf:"bytes,2,rep,name=accusations" json:"accusations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Certs       map[string]*Certificate `protobuf:"bytes,3,rep,name=certs" json:"certs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GossipMsg) Reset()                    { *m = GossipMsg{} }
func (m *GossipMsg) String() string            { return proto.CompactTextString(m) }
func (*GossipMsg) ProtoMessage()               {}
func (*GossipMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GossipMsg) GetNotes() map[string]*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *GossipMsg) GetAccusations() map[string]*Accusation {
	if m != nil {
		return m.Accusations
	}
	return nil
}

func (m *GossipMsg) GetCerts() map[string]*Certificate {
	if m != nil {
		return m.Certs
	}
	return nil
}

type Certificate struct {
	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Certificate) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type Accusation struct {
	Accuser    string `protobuf:"bytes,1,opt,name=accuser" json:"accuser,omitempty"`
	RecentNote *Note  `protobuf:"bytes,2,opt,name=recentNote" json:"recentNote,omitempty"`
}

func (m *Accusation) Reset()                    { *m = Accusation{} }
func (m *Accusation) String() string            { return proto.CompactTextString(m) }
func (*Accusation) ProtoMessage()               {}
func (*Accusation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Accusation) GetAccuser() string {
	if m != nil {
		return m.Accuser
	}
	return ""
}

func (m *Accusation) GetRecentNote() *Note {
	if m != nil {
		return m.RecentNote
	}
	return nil
}

type Note struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Mask  string `protobuf:"bytes,3,opt,name=mask" json:"mask,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Note) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Note) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Note) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

type Ping struct {
	LocalAddr string `protobuf:"bytes,1,opt,name=localAddr" json:"localAddr,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ping) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

type Pong struct {
	LocalAddr string `protobuf:"bytes,1,opt,name=localAddr" json:"localAddr,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Pong) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

type Nodes struct {
	LocalAddr string   `protobuf:"bytes,1,opt,name=localAddr" json:"localAddr,omitempty"`
	AddrList  []string `protobuf:"bytes,2,rep,name=addrList" json:"addrList,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Nodes) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *Nodes) GetAddrList() []string {
	if m != nil {
		return m.AddrList
	}
	return nil
}

type Rebuttal struct {
}

func (m *Rebuttal) Reset()                    { *m = Rebuttal{} }
func (m *Rebuttal) String() string            { return proto.CompactTextString(m) }
func (*Rebuttal) ProtoMessage()               {}
func (*Rebuttal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*NodeInfo)(nil), "NodeInfo")
	proto.RegisterType((*GossipMsg)(nil), "GossipMsg")
	proto.RegisterType((*Certificate)(nil), "Certificate")
	proto.RegisterType((*Accusation)(nil), "Accusation")
	proto.RegisterType((*Note)(nil), "Note")
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*Pong)(nil), "Pong")
	proto.RegisterType((*Nodes)(nil), "Nodes")
	proto.RegisterType((*Rebuttal)(nil), "Rebuttal")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gossip service

type GossipClient interface {
	Monitor(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// rpc Accuse (Accusation) returns (Empty) {}
	Spread(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Empty, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Monitor(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/gossip/Monitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Spread(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gossip/Spread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gossip service

type GossipServer interface {
	Monitor(context.Context, *Ping) (*Pong, error)
	// rpc Accuse (Accusation) returns (Empty) {}
	Spread(context.Context, *GossipMsg) (*Empty, error)
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Monitor(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Spread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Spread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip/Spread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Spread(ctx, req.(*GossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Monitor",
			Handler:    _Gossip_Monitor_Handler,
		},
		{
			MethodName: "Spread",
			Handler:    _Gossip_Spread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gossip.proto",
}

func init() { proto.RegisterFile("gossip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x6d, 0xb2, 0x3b, 0xfb, 0x71, 0xb2, 0x0f, 0x65, 0x50, 0x88, 0xa9, 0xe8, 0x3a, 0x28, 0x2c,
	0x08, 0x79, 0x58, 0x5f, 0x44, 0x10, 0x59, 0x6a, 0x15, 0xd1, 0x2d, 0x12, 0x7f, 0xc1, 0x34, 0x3b,
	0x5d, 0x43, 0xd3, 0x4c, 0x98, 0x99, 0x55, 0xf6, 0xaf, 0xfb, 0x24, 0x77, 0xd2, 0x36, 0x89, 0x96,
	0xee, 0x53, 0xee, 0x9c, 0x7b, 0xe6, 0xdc, 0x73, 0x27, 0xf7, 0x62, 0xb6, 0xd5, 0xd6, 0x16, 0x75,
	0x5a, 0x1b, 0xed, 0xb4, 0x18, 0x83, 0x9d, 0x5d, 0xd7, 0x6e, 0x2f, 0x16, 0x98, 0x9c, 0xeb, 0x8d,
	0xfa, 0x52, 0x5d, 0x6a, 0xfe, 0x14, 0xd3, 0x52, 0xe7, 0xb2, 0x5c, 0x6d, 0x36, 0x26, 0x0e, 0xe6,
	0xc1, 0x62, 0x9a, 0xb5, 0x80, 0xf8, 0x13, 0x62, 0xfa, 0xd9, 0x6b, 0xac, 0xed, 0x96, 0xbf, 0x06,
	0xab, 0xb4, 0x53, 0x36, 0x0e, 0xe6, 0x83, 0x45, 0xb4, 0x7c, 0x9c, 0xde, 0xa5, 0xd2, 0x73, 0xc2,
	0xcf, 0x2a, 0x67, 0xf6, 0x59, 0xc3, 0xe1, 0xef, 0x11, 0xc9, 0x3c, 0xdf, 0x59, 0xe9, 0x0a, 0x5d,
	0xd9, 0x38, 0xf4, 0x57, 0x4e, 0x3a, 0x57, 0x56, 0x6d, 0xb6, 0xb9, 0xd8, 0xe5, 0x53, 0xad, 0x5c,
	0x19, 0x67, 0xe3, 0xc1, 0x7f, 0xb5, 0x4e, 0x09, 0xbf, 0xa9, 0xe5, 0x39, 0xc9, 0x07, 0xa0, 0x35,
	0xc0, 0x8f, 0x31, 0xb8, 0x52, 0xfb, 0x9b, 0x66, 0x28, 0xe4, 0x27, 0x60, 0xbf, 0x64, 0xb9, 0x53,
	0x71, 0x38, 0x0f, 0x16, 0xd1, 0x92, 0x79, 0xbb, 0x59, 0x83, 0xbd, 0x0b, 0xdf, 0x06, 0xc9, 0x57,
	0x1c, 0xff, 0x6b, 0xe7, 0x1e, 0x99, 0x17, 0x7d, 0x99, 0xa8, 0xd3, 0x42, 0x57, 0xec, 0x13, 0xd0,
	0x5a, 0xbc, 0x47, 0x46, 0xf4, 0x65, 0x66, 0xbe, 0xa1, 0xe2, 0xb2, 0xc8, 0x65, 0xcf, 0x94, 0x78,
	0x8e, 0xa8, 0x93, 0x21, 0x21, 0x23, 0x7f, 0x7b, 0xa1, 0x59, 0x46, 0xa1, 0x58, 0x03, 0xad, 0x03,
	0x1e, 0x63, 0xec, 0x1f, 0x50, 0xdd, 0xfe, 0xc7, 0xdb, 0x23, 0x7f, 0x05, 0x18, 0x95, 0xab, 0xca,
	0x51, 0xdb, 0xfd, 0x37, 0xe8, 0x24, 0xc4, 0x47, 0x0c, 0xe9, 0xcb, 0x1f, 0x81, 0xa9, 0x5a, 0xe7,
	0x3f, 0xbd, 0xcc, 0x30, 0x6b, 0x0e, 0x9c, 0x63, 0x28, 0x69, 0x46, 0x42, 0xaf, 0xed, 0x63, 0xc2,
	0xae, 0xa5, 0xbd, 0x8a, 0x07, 0x0d, 0x46, 0xb1, 0x78, 0x89, 0xe1, 0xf7, 0xa2, 0xda, 0x1e, 0x18,
	0x2c, 0x62, 0xe9, 0x83, 0xac, 0x15, 0x18, 0x0d, 0xaa, 0x7d, 0x98, 0xc6, 0x13, 0x4c, 0xc8, 0xce,
	0xb7, 0xc2, 0x3a, 0x3f, 0x67, 0xd3, 0xec, 0xee, 0x2c, 0x80, 0x49, 0xa6, 0x2e, 0x76, 0xce, 0xc9,
	0x72, 0x79, 0x8a, 0x51, 0xb3, 0x10, 0xfc, 0x09, 0xc6, 0x6b, 0x5d, 0x15, 0x4e, 0x1b, 0xce, 0x52,
	0xb2, 0x9b, 0xb0, 0x94, 0xfc, 0x88, 0x23, 0xfe, 0x0c, 0xa3, 0x1f, 0xb5, 0x51, 0x72, 0xc3, 0xd1,
	0xce, 0x5c, 0x32, 0x4a, 0x9b, 0xd5, 0x39, 0xba, 0x18, 0xf9, 0x65, 0x7a, 0xf3, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x93, 0xc6, 0x59, 0xf5, 0x5c, 0x03, 0x00, 0x00,
}
